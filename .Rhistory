geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
#geom_point(size=4,alpha=0.6) +
stat_dotsinterval(point_size=1) +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
#geom_point(size=4,alpha=0.6) +
stat_dotsinterval(alpha=1) +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
#geom_point(size=4,alpha=0.6) +
stat_dotsinterval(alpha=0.6) +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
#geom_point(size=4,alpha=0.6) +
stat_slabinterval() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
#geom_point(size=4,alpha=0.6) +
geom_slabinterval() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
#geom_point(size=4,alpha=0.6) +
stat_eye() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
stat_halfeye()
stat_halfeye
?stat_halfeye
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
#geom_point(size=4,alpha=0.6) +
geom_density_ridges() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
library(ggridges)
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
#geom_point(size=4,alpha=0.6) +
geom_density_ridges() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
#geom_point(size=4,alpha=0.6) +
geom_density_ridges() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
#geom_point(size=4,alpha=0.6) +
geom_slabinterval() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
#geom_point(size=4,alpha=0.6) +
stat_slabinterval() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
#geom_point(size=4,alpha=0.6) +
stat_halfeye() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
geom_point(size=4,alpha=0.6) +
stat_halfeye() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
geom_point(size=4,alpha=0.6) +
#stat_halfeye() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
geom_point(size=2,alpha=0.6) +
#stat_halfeye() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
geom_point(size=2,alpha=0.4) +
#stat_halfeye() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
geom_point(size=2,alpha=0.1) +
#stat_halfeye() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
geom_point(size=2,alpha=0.1) +
#stat_halfeye() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
geom_hline(yintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
weibull_df <- age_estimation_fit$draws(c("shape","scale"), format="df")
weibull_df
View(weibull_df)
This notebook documents code that first *simulates the process of assigning age categories to elephants*, and then *tests the Bayesian Stan model's ability to assign age distributions to individuals* based on their age category.
The code also *highlights the problem in using age category bins* and why we want to do this.
```{r}
library(cmdstanr)
library(tidyverse)
library(ggdist)
```
First let's simulate an age distribution based on a Weibull distribution where we set the shape and scale parameters.
```{r}
probs <- dweibull(1:100, shape = 1.2, scale = 30)
probs <- (probs/sum(probs))
plot(probs)
```
Now we create a fictional population with ages selected from that distribution. We also add an error for age estimation.
```{r}
N <- 50 # Number of individuals
K <- 6 # Number of age bin categories
elephants_ls <- list(
N = N,
K = K,
# Simulated ages drawn from the Weibull distribution plus an error in age estimation
age = sample(1:100, N, replace=TRUE, prob=probs)
#age_category_index = sample(1:4,20,replace=TRUE)
)
```
Next simulate observing ages with error and then binning them into age groups
```{r}
E <- 3 # Error (in either direction) of age estimates
elephants_ls$age_guess <- elephants_ls$age + sample(-E:E, N, replace=TRUE)
elephants_ls$age_category_index <- sapply(elephants_ls$age_guess, function(x) which.max(x < c(15, 30, 45, 60, Inf)))
hist(elephants_ls$age_category)
```
Let's look at the actual age verses the biologist assigned age and look at the thresholds. You can see that the chance of being mis-classified is lower if an actual age is in the middle of the age category. Also, there is mostly a bias towards ages within the age class actually being towards the lower end of the class.
```{r}
data.frame(elephants_ls) %>%
ggplot(aes(x=age, y=age_guess, col=factor(age_category_index))) +
geom_point(size=4,alpha=0.6) +
geom_vline(xintercept=c(15,30,45,60,75), col=factor(2:6), linetype="dashed", alpha=0.6) +
theme_minimal() +
xlab("Assigned age") + ylab("Age")
```
Now we read in the Stan model to estimate ages from the categories based on a Weibull distribution (for real data these will be centred on parameters from fitting to age estimates based on another elephant population)
```{r}
latent_age_ordinal_model <- cmdstan_model("elephant_latent_age_ordinal_regression.stan")
```
Fit model with cmndstanr
```{r message=TRUE, warning=TRUE, include=FALSE}
age_estimation_fit <- latent_age_ordinal_model$sample(
data = elephants_ls,
chains = 4,
parallel_chains = 1,
iter_sampling = 2000
)
```
Examine the estimates. We can plot the estimated ages against the biologist assigned ages and ...
```{r}
age_est_mat <- age_estimation_fit$summary()[52:101, ]
plot_data <- data.frame(age = elephants_ls$age, # Biologists original age est
model_age = age_est_mat$mean) # Mean modelled age
plot_data %>%
ggplot(aes(x=factor(age), y=model_age)) +
geom_point(size=4,alpha=0.6) +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_minimal() +
xlab("Assigned age") + ylab("Modelled ge")
```
Now an equivalent posterior predictive plot from draws from the distribution to show uncertainty around the mean age (then need to do it with full uncertainty).
```{r}
library(posterior)
library(bayesplot)
true_ages <- age_estimation_fit$draws("true_age", format="df")
#mcmc_dens(true_ages)
true_ages <- true_ages[1:100,1:50]
df <- as.data.frame(do.call(rbind, true_ages)) %>%
mutate(true_age = elephants_ls$age) %>% relocate(true_age) %>%
mutate(ID = 1:nrow(df)) %>% relocate(ID)
df <- df %>% pivot_longer(cols = 3:102) %>% select(-name)
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
geom_point(size=2,alpha=0.1) +
#stat_halfeye() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
geom_hline(yintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
```
Now reproduce the Weibull plot from the estimates.
```{r}
weibull_df <- age_estimation_fit$draws(c("shape","scale"), format="df")
probs <- dweibull(1:100, weibull_df$shape, weibull_df$scale)
probs <- (probs/sum(probs))
plot(probs)
```
probs <- dweibull(1:100, weibull_df$shape, weibull_df$scale)
probs <- (probs/sum(probs))
plot(probs)
library(cmdstanr)
library(tidyverse)
library(ggdist)
probs <- dweibull(1:100, shape = 1.2, scale = 30)
probs <- (probs/sum(probs))
plot(probs)
N <- 50 # Number of individuals
K <- 6 # Number of age bin categories
elephants_ls <- list(
N = N,
K = K,
# Simulated ages drawn from the Weibull distribution plus an error in age estimation
age = sample(1:100, N, replace=TRUE, prob=probs)
#age_category_index = sample(1:4,20,replace=TRUE)
)
E <- 3 # Error (in either direction) of age estimates
elephants_ls$age_guess <- elephants_ls$age + sample(-E:E, N, replace=TRUE)
elephants_ls$age_category_index <- sapply(elephants_ls$age_guess, function(x) which.max(x < c(15, 30, 45, 60, Inf)))
hist(elephants_ls$age_category)
data.frame(elephants_ls) %>%
ggplot(aes(x=age, y=age_guess, col=factor(age_category_index))) +
geom_point(size=4,alpha=0.6) +
geom_vline(xintercept=c(15,30,45,60,75), col=factor(2:6), linetype="dashed", alpha=0.6) +
theme_minimal() +
xlab("Assigned age") + ylab("Age")
latent_age_ordinal_model <- cmdstan_model("elephant_latent_age_ordinal_regression.stan")
age_estimation_fit <- latent_age_ordinal_model$sample(
data = elephants_ls,
chains = 4,
parallel_chains = 1,
iter_sampling = 2000
)
age_est_mat <- age_estimation_fit$summary()[52:101, ]
plot_data <- data.frame(age = elephants_ls$age, # Biologists original age est
model_age = age_est_mat$mean) # Mean modelled age
plot_data %>%
ggplot(aes(x=factor(age), y=model_age)) +
geom_point(size=4,alpha=0.6) +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_minimal() +
xlab("Assigned age") + ylab("Modelled ge")
library(posterior)
library(bayesplot)
true_ages <- age_estimation_fit$draws("true_age", format="df")
#mcmc_dens(true_ages)
true_ages <- true_ages[1:100,1:50]
df <- as.data.frame(do.call(rbind, true_ages)) %>%
mutate(true_age = elephants_ls$age) %>% relocate(true_age) %>%
mutate(ID = 1:nrow(df)) %>% relocate(ID)
df <- as.data.frame(do.call(rbind, true_ages)) %>%
mutate(true_age = elephants_ls$age) %>% relocate(true_age) %>%
mutate(ID = 1:nrow(true_ages)) %>% relocate(ID)
df <- as.data.frame(do.call(rbind, true_ages)) %>%
mutate(true_age = elephants_ls$age) %>% relocate(true_age) %>%
mutate(ID = 1:ncol(true_ages)) %>% relocate(ID)
df <- df %>% pivot_longer(cols = 3:102) %>% select(-name)
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
geom_point(size=2,alpha=0.1) +
#stat_halfeye() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
geom_hline(yintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
weibull_df <- age_estimation_fit$draws(c("shape","scale"), format="df")
probs <- dweibull(1:100, weibull_df$shape, weibull_df$scale)
probs <- (probs/sum(probs))
plot(probs)
probs <- dweibull(1:100, weibull_df$shape, weibull_df$scale)
probs <- (probs/sum(probs))
plot(probs)
probs <- dweibull(1:100, mean(weibull_df$shape), mean(weibull_df$scale))
probs <- (probs/sum(probs))
plot(probs)
This notebook documents code that first *simulates the process of assigning age categories to elephants*, and then *tests the Bayesian Stan model's ability to assign age distributions to individuals* based on their age category.
The code also *highlights the problem in using age category bins* and why we want to do this.
```{r}
library(cmdstanr)
library(tidyverse)
library(ggdist)
```
First let's simulate an age distribution based on a Weibull distribution where we set the shape and scale parameters.
```{r}
probs <- dweibull(1:100, shape = 1.2, scale = 30)
probs <- (probs/sum(probs))
plot(probs)
```
Now we create a fictional population with ages selected from that distribution. We also add an error for age estimation.
```{r}
N <- 100 # Number of individuals
K <- 6 # Number of age bin categories
elephants_ls <- list(
N = N,
K = K,
# Simulated ages drawn from the Weibull distribution plus an error in age estimation
age = sample(1:100, N, replace=TRUE, prob=probs)
#age_category_index = sample(1:4,20,replace=TRUE)
)
```
Next simulate observing ages with error and then binning them into age groups
```{r}
E <- 3 # Error (in either direction) of age estimates
elephants_ls$age_guess <- elephants_ls$age + sample(-E:E, N, replace=TRUE)
elephants_ls$age_category_index <- sapply(elephants_ls$age_guess, function(x) which.max(x < c(15, 30, 45, 60, Inf)))
hist(elephants_ls$age_category)
```
Let's look at the actual age verses the biologist assigned age and look at the thresholds. You can see that the chance of being mis-classified is lower if an actual age is in the middle of the age category. Also, there is mostly a bias towards ages within the age class actually being towards the lower end of the class.
```{r}
data.frame(elephants_ls) %>%
ggplot(aes(x=age, y=age_guess, col=factor(age_category_index))) +
geom_point(size=4,alpha=0.6) +
geom_vline(xintercept=c(15,30,45,60,75), col=factor(2:6), linetype="dashed", alpha=0.6) +
theme_minimal() +
xlab("Assigned age") + ylab("Age")
```
Now we read in the Stan model to estimate ages from the categories based on a Weibull distribution (for real data these will be centred on parameters from fitting to age estimates based on another elephant population)
```{r}
latent_age_ordinal_model <- cmdstan_model("elephant_latent_age_ordinal_regression.stan")
```
Fit model with cmndstanr
```{r message=TRUE, warning=TRUE, include=FALSE}
age_estimation_fit <- latent_age_ordinal_model$sample(
data = elephants_ls,
chains = 4,
parallel_chains = 1,
iter_sampling = 2000
)
```
Examine the estimates. We can plot the estimated ages against the biologist assigned ages and ...
```{r}
age_est_mat <- age_estimation_fit$summary()[52:101, ]
plot_data <- data.frame(age = elephants_ls$age, # Biologists original age est
model_age = age_est_mat$mean) # Mean modelled age
plot_data %>%
ggplot(aes(x=factor(age), y=model_age)) +
geom_point(size=4,alpha=0.6) +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_minimal() +
xlab("Assigned age") + ylab("Modelled ge")
```
Now an equivalent posterior predictive plot from draws from the distribution to show uncertainty around the mean age (then need to do it with full uncertainty).
```{r}
library(posterior)
library(bayesplot)
true_ages <- age_estimation_fit$draws("true_age", format="df")
#mcmc_dens(true_ages)
true_ages <- true_ages[1:100,1:50]
df <- as.data.frame(do.call(rbind, true_ages)) %>%
mutate(true_age = elephants_ls$age) %>% relocate(true_age) %>%
mutate(ID = 1:ncol(true_ages)) %>% relocate(ID)
df <- df %>% pivot_longer(cols = 3:102) %>% select(-name)
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
geom_point(size=2,alpha=0.1) +
#stat_halfeye() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
geom_hline(yintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
```
Now reproduce the Weibull plot from the estimates (improve to show CIs)
```{r}
weibull_df <- age_estimation_fit$draws(c("shape","scale"), format="df")
probs <- dweibull(1:100, mean(weibull_df$shape), mean(weibull_df$scale))
probs <- (probs/sum(probs))
plot(probs)
```
library(cmdstanr)
library(tidyverse)
library(ggdist)
probs <- dweibull(1:100, shape = 1.2, scale = 30)
probs <- (probs/sum(probs))
plot(probs)
N <- 100 # Number of individuals
K <- 6 # Number of age bin categories
elephants_ls <- list(
N = N,
K = K,
# Simulated ages drawn from the Weibull distribution plus an error in age estimation
age = sample(1:100, N, replace=TRUE, prob=probs)
#age_category_index = sample(1:4,20,replace=TRUE)
)
E <- 3 # Error (in either direction) of age estimates
elephants_ls$age_guess <- elephants_ls$age + sample(-E:E, N, replace=TRUE)
elephants_ls$age_category_index <- sapply(elephants_ls$age_guess, function(x) which.max(x < c(15, 30, 45, 60, Inf)))
hist(elephants_ls$age_category)
data.frame(elephants_ls) %>%
ggplot(aes(x=age, y=age_guess, col=factor(age_category_index))) +
geom_point(size=4,alpha=0.6) +
geom_vline(xintercept=c(15,30,45,60,75), col=factor(2:6), linetype="dashed", alpha=0.6) +
theme_minimal() +
xlab("Assigned age") + ylab("Age")
latent_age_ordinal_model <- cmdstan_model("elephant_latent_age_ordinal_regression.stan")
age_estimation_fit <- latent_age_ordinal_model$sample(
data = elephants_ls,
chains = 4,
parallel_chains = 1,
iter_sampling = 2000
)
age_est_mat <- age_estimation_fit$summary()[52:101, ]
plot_data <- data.frame(age = elephants_ls$age, # Biologists original age est
model_age = age_est_mat$mean) # Mean modelled age
plot_data %>%
ggplot(aes(x=factor(age), y=model_age)) +
geom_point(size=4,alpha=0.6) +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_minimal() +
xlab("Assigned age") + ylab("Modelled ge")
library(posterior)
library(bayesplot)
true_ages <- age_estimation_fit$draws("true_age", format="df")
#mcmc_dens(true_ages)
true_ages <- true_ages[1:100,1:50]
df <- as.data.frame(do.call(rbind, true_ages)) %>%
mutate(true_age = elephants_ls$age) %>% relocate(true_age) %>%
mutate(ID = 1:ncol(true_ages)) %>% relocate(ID)
library(posterior)
library(bayesplot)
true_ages <- age_estimation_fit$draws("true_age", format="df")
#mcmc_dens(true_ages)
true_ages <- true_ages[1:100,1:50]
df <- as.data.frame(do.call(rbind, true_ages)) %>%
mutate(true_age = elephants_ls$age) %>% relocate(true_age) %>%
mutate(ID = 1:ncol(true_ages)) %>% relocate(ID)
df <- as.data.frame(do.call(rbind, true_ages)) %>%
mutate(true_age = elephants_ls$age) %>% relocate(true_age) %>%
mutate(ID = 1:nrow(true_ages)) %>% relocate(ID)
nrow(true_ages)
ncol(true_ages)
df <- as.data.frame(do.call(rbind, true_ages)) %>%
mutate(true_age = elephants_ls$age) %>% relocate(true_age) %>%
mutate(ID = 1:ncol(true_ages)) %>% relocate(ID)
ncol(true_ages)
#mcmc_dens(true_ages)
true_ages <- true_ages[1:100,1:N]
nrow(true_ages)
df <- as.data.frame(do.call(rbind, true_ages)) %>%
mutate(true_age = elephants_ls$age) %>% relocate(true_age) %>%
mutate(ID = 1:nrow(true_ages)) %>% relocate(ID)
library(cmdstanr)
library(tidyverse)
library(ggdist)
probs <- dweibull(1:100, shape = 1.2, scale = 30)
probs <- (probs/sum(probs))
plot(probs)
N <- 100 # Number of individuals
K <- 6 # Number of age bin categories
elephants_ls <- list(
N = N,
K = K,
# Simulated ages drawn from the Weibull distribution plus an error in age estimation
age = sample(1:100, N, replace=TRUE, prob=probs)
#age_category_index = sample(1:4,20,replace=TRUE)
)
E <- 3 # Error (in either direction) of age estimates
elephants_ls$age_guess <- elephants_ls$age + sample(-E:E, N, replace=TRUE)
elephants_ls$age_category_index <- sapply(elephants_ls$age_guess, function(x) which.max(x < c(15, 30, 45, 60, Inf)))
hist(elephants_ls$age_category)
data.frame(elephants_ls) %>%
ggplot(aes(x=age, y=age_guess, col=factor(age_category_index))) +
geom_point(size=4,alpha=0.6) +
geom_vline(xintercept=c(15,30,45,60,75), col=factor(2:6), linetype="dashed", alpha=0.6) +
theme_minimal() +
xlab("Assigned age") + ylab("Age")
latent_age_ordinal_model <- cmdstan_model("elephant_latent_age_ordinal_regression.stan")
age_estimation_fit <- latent_age_ordinal_model$sample(
data = elephants_ls,
chains = 4,
parallel_chains = 1,
iter_sampling = 2000
)
age_est_mat <- age_estimation_fit$summary()[52:101, ]
plot_data <- data.frame(age = elephants_ls$age, # Biologists original age est
model_age = age_est_mat$mean) # Mean modelled age
plot_data %>%
ggplot(aes(x=factor(age), y=model_age)) +
geom_point(size=4,alpha=0.6) +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_minimal() +
xlab("Assigned age") + ylab("Modelled ge")
library(posterior)
library(bayesplot)
true_ages <- age_estimation_fit$draws("true_age", format="df")
#mcmc_dens(true_ages)
true_ages <- true_ages[1:100,1:N]
df <- as.data.frame(do.call(rbind, true_ages)) %>%
mutate(true_age = elephants_ls$age) %>% relocate(true_age) %>%
mutate(ID = 1:nrow(true_ages)) %>% relocate(ID)
df <- df %>% pivot_longer(cols = 3:102) %>% select(-name)
df %>% ggplot(aes(x=true_age, y=value, group=factor(ID))) +
geom_point(size=2,alpha=0.1) +
#stat_halfeye() +
geom_vline(xintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
geom_hline(yintercept=c(15,30,45,60,75), linetype="dashed", alpha=0.6) +
theme_bw() +
xlab("Assigned age") + ylab("Modelled age")
weibull_df <- age_estimation_fit$draws(c("shape","scale"), format="df")
probs <- dweibull(1:100, mean(weibull_df$shape), mean(weibull_df$scale))
probs <- (probs/sum(probs))
plot(probs)
